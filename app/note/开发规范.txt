1、开发架构
必须使用mvc的方式进行开发，核心如下：
scene: 继承mw.GameScene，游戏场景，场景一般按照大模块区分。
controller: 继承mw.ViewController，视图控制器，每个ViewController需要明确自己在当前场景的职责。
model: 继承ModelBase，游戏数据的载体，必须注意定义数据约束，以及将数据逻辑聚合在Model中。
view: 继承cc.Node或其子类，每个view关联一个或多个model，model发生数据变化时，view也要做出UI更新，另外，和	model不相关的UI放到controller中初始化。
segue: 继承mw.ViewSegue，可以被多个ViewController重用，定义初始化或析构ViewController的行为。

2、命名规范
(1) 由于js没有所谓访问修饰符的概念，我们规定：不希望外界访问的方法和字段一律以“_”作为前缀，外界可以访问的方法和字段没有前缀。
(2) 类名采用驼峰标识（首字母大写）；字段名、方法名、局部变量名、参数名采用驼峰标识（首字母小写）；常量名全部大写，并且单词与单词之间用“_”连接；。
(3) js文件夹中除了framework文件夹下的文件名全部小写以外，其余文件夹下的文件名都用该文件的类名作为文件名，不是写类的文件，也需要注意使用驼峰标识（首字母大写），比如”GameConstants.js”。
(4) 如果需要添加C++类，命名规范和js一样。
(5) 命名严禁使用拼音。
(6) 资源文件名（包括纹理、ccs、tmx、其他资源等）全部小写，单词之间使用“_”连接。

3、其他
(1) 文件夹层次要清晰，models, scenes, segues, views放各自类型的文件，如果该文件和某模块息息相关，需要再新建一个对应模块的文件夹放入其中，比如scenes/battle/BattleScene.js。
(2) 除了自己定义的类、通用枚举、通用常量，应尽量避免定义不通用的全局变量。
(3) 难懂的文件必须要写清楚注释和用法。
(4) 当某个类已经用了一段时间之后，发现已经不再适用于当前版本时，而是需要使用新的类时，不要删除该文件，而是在顶部注明废弃，用mw.deprecateClass(oldClass, newClass)来标明，方法同理，使用mw.deprecateMethod(oldMethod, newMethod)来标明，字段可以忽视。
(5) 打包tps时，记得同名文件夹有两层，这是为了使文件夹名可以作为区分，如：battle/bg.png和map/bg.png就是两个不同的图片资源。
(6) 编码不需要用多牛逼的技术，但是一定要足够合理。
(7) 多考虑复用性、可扩展性。