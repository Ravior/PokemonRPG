/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mw.spider;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.MalformedURLException;
import java.net.SocketTimeoutException;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Vector;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollBar;
import javax.swing.SwingUtilities;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

/**
 *
 * @author Maple
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fcSelectPath = new javax.swing.JFileChooser();
        tpMain = new javax.swing.JTabbedPane();
        tabGif = new javax.swing.JPanel();
        cbFrom = new javax.swing.JComboBox();
        cbTo = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        txtGifPath = new javax.swing.JTextField();
        btnGifSelect = new javax.swing.JButton();
        svLog = new javax.swing.JScrollPane();
        txtLog = new javax.swing.JTextArea();
        btnSpider = new javax.swing.JButton();
        btnConfigure = new javax.swing.JButton();
        mbMain = new javax.swing.JMenuBar();
        mFile = new javax.swing.JMenu();
        miExit = new javax.swing.JMenuItem();
        mEdit = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Pokemon Spider Tool (Made by Winder)");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tabGif.setPreferredSize(new java.awt.Dimension(357, 94));

        int MAX_NUM = 649;
        String[] models = new String[MAX_NUM];
        for (int i = 1; i <= MAX_NUM; ++i) {
            models[i - 1] = String.valueOf(i);
        }
        cbFrom.setModel(new javax.swing.DefaultComboBoxModel(models));
        cbFrom.setSelectedIndex(0);

        cbTo.setModel(new javax.swing.DefaultComboBoxModel(models));
        cbTo.setSelectedIndex(MAX_NUM - 1);

        jLabel1.setText("to");
        jLabel1.setToolTipText("");

        txtGifPath.setToolTipText("");

        btnGifSelect.setText("Select...");
        btnGifSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGifSelectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tabGifLayout = new javax.swing.GroupLayout(tabGif);
        tabGif.setLayout(tabGifLayout);
        tabGifLayout.setHorizontalGroup(
            tabGifLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabGifLayout.createSequentialGroup()
                .addComponent(cbFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(tabGifLayout.createSequentialGroup()
                .addComponent(txtGifPath, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnGifSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        tabGifLayout.setVerticalGroup(
            tabGifLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabGifLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabGifLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(tabGifLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtGifPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGifSelect))
                .addContainerGap())
        );

        tpMain.addTab("Gif Sprites", tabGif);

        txtLog.setColumns(20);
        txtLog.setRows(5);
        txtLog.setFocusable(false);
        svLog.setViewportView(txtLog);

        btnSpider.setText("Spider");
        btnSpider.setToolTipText("");
        btnSpider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSpiderActionPerformed(evt);
            }
        });

        btnConfigure.setText("Configure");
        btnConfigure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfigureActionPerformed(evt);
            }
        });

        mFile.setText("File");

        miExit.setText("Exit");
        miExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miExitActionPerformed(evt);
            }
        });
        mFile.add(miExit);

        mbMain.add(mFile);

        mEdit.setText("Edit");
        mbMain.add(mEdit);

        setJMenuBar(mbMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tpMain)
                    .addComponent(svLog, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnConfigure)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSpider)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tpMain, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(svLog, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnSpider)
                    .addComponent(btnConfigure, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void miExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_miExitActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void btnConfigureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfigureActionPerformed
        this.log("Configuring...");
        Thread worker = new Thread() {
            @Override
            public void run() {
                configure();
            }
        };
        worker.start();
    }//GEN-LAST:event_btnConfigureActionPerformed

    private void btnGifSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGifSelectActionPerformed
        // TODO add your handling code here:
        fcSelectPath.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int result = fcSelectPath.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            txtGifPath.setText(fcSelectPath.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_btnGifSelectActionPerformed

    private void btnSpiderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSpiderActionPerformed
        // TODO add your handling code here:
        if (tpMain.getSelectedIndex() == 0) {
            if (!new File(CONFIGURE_PATH).exists()) {
                JOptionPane.showMessageDialog(this, "Not configured yet. Click configure to initialize the info, please.");
                return;
            }
            if (!new File(txtGifPath.getText().trim()).exists()) {
                JOptionPane.showMessageDialog(this, "Invalid export path.");
                return;
            }
            
            this.log("Begin working...");
            Thread worker = new Thread() {
                @Override
                public void run() {
                    readConfig();
                    catchGif();
                    log("All done!");
                }
            };
            worker.start();
        };
    }//GEN-LAST:event_btnSpiderActionPerformed
    
    private void catchGif() {
        List<String> omitted = new ArrayList<String>();
        String[] all = _conf.split("\n");
        for (int i = cbFrom.getSelectedIndex(); i <= cbTo.getSelectedIndex(); ++i) {
            this.log("Catching [" + String.valueOf(i + 1) + "] gif...");
            String url = GIF_BASE_URL + "/" + all[i];
            try {
                Document doc = Jsoup.connect(url).get();
                Elements children = doc.getElementsByAttributeValueMatching("href", "[^\\s]+\\.gif$");
                int count = children.size();
                for (int j = 0; j < count; ++j) {
                    Element elem = children.get(j);
//                    this.log(elem.attr("href"));
                    String savePath = txtGifPath.getText().trim();
                    String filename = null;
                    if (i + 1 == 641 || i + 1 == 645 || i + 1 == 647) {
                        filename = String.format("%03d%s_%d.gif", i + 1, _suffix[j % 4], j / 4 + 1);
                    } else if (i + 1 == 642) {
                        filename = String.format("%03d%s_%d.gif", i + 1, _suffix[j % 4], j / 4 == 0 ? 2 : 1);
                    } else if (i + 1 == 646) {
                        if (j >= 0 && j <= 7) {
                            filename = String.format("%03d%s_%d.gif", i + 1, _suffix[j / 2], j % 2 == 0 ? 2 : 3);
                        } else {
                            filename = String.format("%03d%s_1.gif", i + 1, _suffix[j % 4]);
                        }
                    } else if (i + 1 == 649) {
                        int times = count / 4;
                        String[][] map = { 
                            { "2", "3", "4", "1", "5" }, 
                            { "1", "5", "4", "2", "3" }, 
                            { "5", "2", "3", "1", "4" }, 
                            { "1", "3", "4", "5", "2" }
                        };
                        filename = String.format("%03d%s_%s.gif", i + 1, _suffix[j / times], map[j / times][j % times]);
                    } else if (count == 4) {
                        filename = String.format("%03d%s.gif", i + 1, _suffix[j]);
                    } else {
                        int times = count / 4;
                        filename = String.format("%03d%s_%d.gif", i + 1, _suffix[j / times], j % times + 1);
                    }
                    if (savePath.endsWith("/")) {
                        savePath += filename;
                    } else {
                        savePath += File.separator + filename;
                    }
                    if (new File(savePath).exists()) {
                        continue;
                    }
                    this.download(elem.attr("href"), savePath);
                    if (!new File(savePath).exists()) {
                        omitted.add(savePath);
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.log("[" + String.valueOf(i + 1) + "] done.");
            try {
                Thread.sleep(1);
            } catch (InterruptedException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        for (String omit : omitted) {
            this.log("Lost: " + omit);
        }
    }
    
    private void readConfig() {
        byte[] config = FileUtils.getInstance().readDataFromFile(CONFIGURE_PATH);
        _conf = new String(config);
    }
    
    private void configure() {
        StringBuilder sb = new StringBuilder();
        Document doc;
        try {
            doc = Jsoup.connect(GIF_BASE_URL).get();
            Elements allPokemonNames = doc.select(".infocard-list-compact");
            for (Element child : allPokemonNames) {
                for (Element elem : child.getElementsByClass("ent-name")) {
                    sb.append(elem.attr("href").substring(elem.attr("href").lastIndexOf("/") + 1)).append("\n");
                }
            }
            FileUtils.getInstance().writeDataToFile(CONFIGURE_PATH, sb.toString().getBytes());
            this.log("Configure done.");
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void download(String netPath, String savePath) {
        try {
            URL url = new URL(netPath);
            URLConnection conn = url.openConnection();
            conn.setConnectTimeout(5 * 1000);
            byte[] buffer = new byte[1024];
            try (InputStream is = conn.getInputStream()) {
                int len;
                try (OutputStream os = new FileOutputStream(savePath)) {
                    while ((len = is.read(buffer)) != -1) {
                        os.write(buffer, 0, len);
                    }
                }
            }
        } catch (MalformedURLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void log(String content) {
        _lock.lock();
        try {
            _contents.offer(content);
        } finally {
            _lock.unlock();
        }
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                _lock.lock();
                try {
                    txtLog.append(_contents.poll() + "\n");
                } finally {
                    _lock.unlock();
                }
                JScrollBar scrollBar = svLog.getVerticalScrollBar();
                if (scrollBar != null) {
                    scrollBar.setValue(scrollBar.getMaximum());
                }
            }
        });
    }
    
    private Queue<String> _contents = new LinkedList<String>();
    private Lock _lock = new ReentrantLock();
    private String _conf = null;
    private String[] _suffix = { "", "_s", "_b", "_sb" };
    
    private final String GIF_BASE_URL = "http://pokemondb.net/sprites";
    private final String CONFIGURE_PATH = "names.conf";
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConfigure;
    private javax.swing.JButton btnGifSelect;
    private javax.swing.JButton btnSpider;
    private javax.swing.JComboBox cbFrom;
    private javax.swing.JComboBox cbTo;
    private javax.swing.JFileChooser fcSelectPath;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu mEdit;
    private javax.swing.JMenu mFile;
    private javax.swing.JMenuBar mbMain;
    private javax.swing.JMenuItem miExit;
    private javax.swing.JScrollPane svLog;
    private javax.swing.JPanel tabGif;
    private javax.swing.JTabbedPane tpMain;
    private javax.swing.JTextField txtGifPath;
    private javax.swing.JTextArea txtLog;
    // End of variables declaration//GEN-END:variables
}
